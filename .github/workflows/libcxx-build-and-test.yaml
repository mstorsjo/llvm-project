# This file defines pre-commit CI for libc++, libc++abi, and libunwind (on Github).
#
# We split the configurations in multiple stages with the intent of saving compute time
# when a job fails early in the pipeline. This is why the jobs are marked as `continue-on-error: false`.
# We try to run the CI configurations with the most signal in the first stage.
#
# Stages 1 & 2 are meant to be "smoke tests", and are meant to catch most build/test failures quickly and without using
# too many resources.
# Stage 3 is "everything else", and is meant to catch breakages on more niche or unique configurations.
#
# Therefore, we "fail-fast" for any failures during stages 1 & 2, meaning any job failing cancels all other running jobs,
# under the assumption that if the "smoke tests" fail, then the other configurations will likely fail in the same way.
# However, stage 3 does not fail fast, as it's more likely that any one job failing is a flake or a configuration-specific
#
name: Build and Test libc++
on:
  push:
  pull_request:
    paths:
      - 'libcxx/**'
      - 'libcxxabi/**'
      - 'libunwind/**'
      - 'runtimes/**'
      - 'cmake/**'
      - '.github/workflows/libcxx-build-and-test.yaml'
  schedule:
    # Run nightly at 08:00 UTC (aka 00:00 Pacific, aka 03:00 Eastern)
    - cron: '0 8 * * *'

permissions:
  contents: read # Default everything to read-only

jobs:
  stage1:
    if: github.repository_owner == 'llvm'
    runs-on: libcxx-self-hosted-linux
    container: ghcr.io/llvm/libcxx-linux-builder:b6bb9dc5abd7c6452c13a53fa8949cb259db459b
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        config: [
          'frozen-cxx03-headers',
          'generic-cxx03',
          'generic-cxx26',
          'generic-modules'
        ]
        cc: [  'clang-21' ]
        cxx: [ 'clang++-21' ]
        include:
          - config: 'generic-gcc'
            cc: 'gcc-14'
            cxx: 'g++-14'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: ${{ matrix.config }}.${{ matrix.cxx }}
        run: libcxx/utils/ci/run-buildbot ${{ matrix.config }}
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
      - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        if: always()
        with:
          name: ${{ matrix.config }}-${{ matrix.cxx }}-results
          path: |
            **/test-results.xml
            **/*.abilist
            **/CMakeConfigureLog.yaml
            **/CMakeError.log
            **/CMakeOutput.log
            **/crash_diagnostics/*
  stage2:
    if: github.repository_owner == 'llvm'
    runs-on: libcxx-self-hosted-linux
    container: ghcr.io/llvm/libcxx-linux-builder:b6bb9dc5abd7c6452c13a53fa8949cb259db459b
    needs: [ stage1 ]
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        config: [
          'generic-cxx11',
          'generic-cxx14',
          'generic-cxx17',
          'generic-cxx20',
          'generic-cxx23'
        ]
        cc: [ 'clang-21' ]
        cxx: [ 'clang++-21' ]
        include:
          - config: 'generic-gcc-cxx11'
            cc: 'gcc-14'
            cxx: 'g++-14'
          - config: 'generic-cxx26'
            cc: 'clang-20'
            cxx: 'clang++-20'
          - config: 'generic-cxx26'
            cc: 'clang-19'
            cxx: 'clang++-19'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: ${{ matrix.config }}
        run: libcxx/utils/ci/run-buildbot ${{ matrix.config }}
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
      - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        if: always()  # Upload artifacts even if the build or test suite fails
        with:
          name: ${{ matrix.config }}-${{ matrix.cxx }}-results
          path: |
            **/test-results.xml
            **/*.abilist
            **/CMakeConfigureLog.yaml
            **/CMakeError.log
            **/CMakeOutput.log
            **/crash_diagnostics/*
  stage3:
    if: github.repository_owner == 'llvm'
    needs: [ stage2 ]
    continue-on-error: false
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        config: [
          'generic-abi-unstable',
          'generic-hardening-mode-debug',
          'generic-hardening-mode-extensive',
          'generic-hardening-mode-fast',
          'generic-hardening-mode-fast-with-abi-breaks',
          'generic-merged',
          'generic-modules-cxx17-lsv',
          'generic-no-exceptions',
          'generic-no-experimental',
          'generic-no-filesystem',
          'generic-no-localization',
          'generic-no-terminal',
          'generic-no-random_device',
          'generic-no-threads',
          'generic-no-tzdb',
          'generic-no-unicode',
          'generic-no-wide-characters',
          'generic-no-rtti',
          'generic-optimized-speed',
          'generic-static',
          'bootstrapping-build'
        ]
        machine: [ 'libcxx-self-hosted-linux' ]
        include:
        - config: 'generic-cxx26'
          machine: libcxx-self-hosted-linux
        - config: 'generic-asan'
          machine: libcxx-self-hosted-linux
        - config: 'generic-tsan'
          machine: libcxx-self-hosted-linux
        - config: 'generic-ubsan'
          machine: libcxx-self-hosted-linux
        # Use a larger machine for MSAN to avoid timeout and memory allocation issues.
        - config: 'generic-msan'
          machine: libcxx-self-hosted-linux
    runs-on: ${{ matrix.machine }}
    container: ghcr.io/llvm/libcxx-linux-builder:b6bb9dc5abd7c6452c13a53fa8949cb259db459b
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: ${{ matrix.config }}
        run: libcxx/utils/ci/run-buildbot ${{ matrix.config }}
        env:
          CC: clang-21
          CXX: clang++-21
      - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        if: always()
        with:
          name: ${{ matrix.config }}-results
          path: |
            **/test-results.xml
            **/*.abilist
            **/CMakeConfigureLog.yaml
            **/CMakeError.log
            **/CMakeOutput.log
            **/crash_diagnostics/*

  macos:
    needs: [ stage3 ]
    strategy:
      fail-fast: false
      matrix:
        include:
        - config: generic-cxx03
          os: macos-15
        - config: generic-cxx23
          os: macos-15
        - config: generic-modules
          os: macos-15
        - config: apple-configuration
          os: macos-15
        # TODO: These jobs are intended to test back-deployment (building against ToT libc++ but running against an
        #       older system-provided libc++.dylib). Doing this properly would require building the test suite on a
        #       recent macOS using a recent Clang (hence recent Xcode), and then running the actual test suite on an
        #       older mac. We could do that by e.g. sharing artifacts between the two jobs.
        #
        #       However, our Lit configuration currently doesn't provide a good way to do that in a batch, so our only
        #       alternative is to actually build on the same host that we're going to run on. Sadly, that doesn't work
        #       since older macOSes don't support newer Xcodes. For now, we run the "backdeployment" jobs on recent
        #       macOS versions as a way to avoid rotting that configuration, but it doesn't provide a lot of additional
        #       coverage.
        - config: apple-system
          os: macos-15
        - config: apple-system-hardened
          os: macos-15
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd # v1.6.0
        with:
          # https://github.com/actions/runner-images/blob/main/images/macos/macos-15-Readme.md
          xcode-version: '16.3'
      - uses: seanmiddleditch/gha-setup-ninja@3b1f8f94a2f8254bd26914c4ab9474d4f0015f67 # v6
      - name: Build and test
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          python -m pip install psutil
          bash libcxx/utils/ci/run-buildbot ${{ matrix.config }}
      - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        if: always()  # Upload artifacts even if the build or test suite fails
        with:
          name: macos-${{ matrix.config }}-results
          path: |
            **/test-results.xml
            **/*.abilist
            **/CMakeConfigureLog.yaml
            **/CMakeError.log
            **/CMakeOutput.log
            **/crash_diagnostics/*

  windows:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: aarch64, target_arch: armv7 }
          - { arch: aarch64, target_arch: aarch64 }
          - { arch: x86_64,  target_arch: i686 }
          - { arch: x86_64,  target_arch: x86_64 }
    runs-on: ${{startsWith(matrix.arch, 'a') && 'windows-11-arm' || 'windows-latest'}}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Install dependencies
        run: |
          choco install -y ninja
          pip install psutil
      - name: Install llvm-mingw
        run: |
          curl -LO https://github.com/mstorsjo/llvm-mingw/releases/download/20250417/llvm-mingw-20250417-ucrt-${{matrix.arch}}.zip
          powershell Expand-Archive llvm-mingw*.zip -DestinationPath .
          del llvm-mingw*.zip
          mv llvm-mingw* c:\llvm-mingw
          echo "c:\llvm-mingw\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append
          echo "c:\llvm-mingw\python\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append
          echo "PYTHON_EXE=c:/llvm-mingw/python/bin/python3.exe" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - name: Add Git Bash to the path
        run: |
          echo "c:\Program Files\Git\usr\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append
      - name: Build and test
        run: |
          mkdir build
          cd build
          cmake ../runtimes `
            -G Ninja `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_MESSAGE=NEVER `
            -DCMAKE_CXX_COMPILER_TARGET=${{matrix.target_arch}}-w64-windows-gnu `
            -DPython3_EXECUTABLE="$Env:PYTHON_EXE" `
            -DLIBCXX_ENABLE_WERROR=YES `
            -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" `
            -DLIBCXX_CXX_ABI=libcxxabi `
            -DCMAKE_C_COMPILER=${{matrix.target_arch}}-w64-mingw32-clang `
            -DCMAKE_CXX_COMPILER=${{matrix.target_arch}}-w64-mingw32-clang++ `
            -DLIBCXXABI_ENABLE_SHARED=NO `
            -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=YES `
            -DLIBCXX_USE_COMPILER_RT=YES `
            -DLIBCXXABI_USE_COMPILER_RT=YES `
            -DLIBUNWIND_USE_COMPILER_RT=YES `
            -DLIBCXXABI_USE_LLVM_UNWINDER=YES `
            -DLIBCXX_EXTRA_SITE_DEFINES="__USE_MINGW_ANSI_STDIO=${{startsWith(matrix.arch, 'a') && '0' || '1'}}" `
            -DLLVM_LIT_ARGS="-v --time-tests"
          ninja
          ninja check-cxx
          ninja check-unwind
          ninja check-cxxabi
